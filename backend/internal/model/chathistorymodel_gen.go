// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatHistoryFieldNames          = builder.RawFieldNames(&ChatHistory{})
	chatHistoryRows                = strings.Join(chatHistoryFieldNames, ",")
	chatHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(chatHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(chatHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatHistoryModel interface {
		Insert(ctx context.Context, data *ChatHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatHistory, error)
		Update(ctx context.Context, data *ChatHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatHistory struct {
		Id          int64  `db:"id"`
		CharacterId int64  `db:"character_id"` // 角色id
		Role        string `db:"role"`         // 消息角色类型 user | assistant
		Content     string `db:"content"`      // 消息内容
		Created     int64  `db:"created"`      // 创建时间戳(s)
	}
)

func newChatHistoryModel(conn sqlx.SqlConn) *defaultChatHistoryModel {
	return &defaultChatHistoryModel{
		conn:  conn,
		table: "`chat_history`",
	}
}

func (m *defaultChatHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatHistoryModel) FindOne(ctx context.Context, id int64) (*ChatHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatHistoryRows, m.table)
	var resp ChatHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatHistoryModel) Insert(ctx context.Context, data *ChatHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, chatHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CharacterId, data.Role, data.Content, data.Created)
	return ret, err
}

func (m *defaultChatHistoryModel) Update(ctx context.Context, data *ChatHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CharacterId, data.Role, data.Content, data.Created, data.Id)
	return err
}

func (m *defaultChatHistoryModel) tableName() string {
	return m.table
}
