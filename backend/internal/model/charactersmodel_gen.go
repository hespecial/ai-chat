// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	charactersFieldNames          = builder.RawFieldNames(&Characters{})
	charactersRows                = strings.Join(charactersFieldNames, ",")
	charactersRowsExpectAutoSet   = strings.Join(stringx.Remove(charactersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	charactersRowsWithPlaceHolder = strings.Join(stringx.Remove(charactersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	charactersModel interface {
		Insert(ctx context.Context, data *Characters) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Characters, error)
		Update(ctx context.Context, data *Characters) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCharactersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Characters struct {
		Id          int64  `db:"id"`
		Name        string `db:"name"`        // 角色名称
		Subtitle    string `db:"subtitle"`    // 副标题
		Description string `db:"description"` // 角色描述
		Tags        string `db:"tags"`        // 角色标签
		Language    string `db:"language"`    // 角色使用的语言
		Greeting    string `db:"greeting"`    // 招呼语
		Prompt      string `db:"prompt"`      // 人物形象提示词
	}
)

func newCharactersModel(conn sqlx.SqlConn) *defaultCharactersModel {
	return &defaultCharactersModel{
		conn:  conn,
		table: "`characters`",
	}
}

func (m *defaultCharactersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCharactersModel) FindOne(ctx context.Context, id int64) (*Characters, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", charactersRows, m.table)
	var resp Characters
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCharactersModel) Insert(ctx context.Context, data *Characters) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, charactersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Subtitle, data.Description, data.Tags, data.Language, data.Greeting, data.Prompt)
	return ret, err
}

func (m *defaultCharactersModel) Update(ctx context.Context, data *Characters) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, charactersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Subtitle, data.Description, data.Tags, data.Language, data.Greeting, data.Prompt, data.Id)
	return err
}

func (m *defaultCharactersModel) tableName() string {
	return m.table
}
