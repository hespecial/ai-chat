// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	skillFieldNames          = builder.RawFieldNames(&Skill{})
	skillRows                = strings.Join(skillFieldNames, ",")
	skillRowsExpectAutoSet   = strings.Join(stringx.Remove(skillFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	skillRowsWithPlaceHolder = strings.Join(stringx.Remove(skillFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	skillModel interface {
		Insert(ctx context.Context, data *Skill) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Skill, error)
		Update(ctx context.Context, data *Skill) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSkillModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Skill struct {
		Id          int64  `db:"id"`
		Name        string `db:"name"`        // 技能名称
		Description string `db:"description"` // 技能描述
		SufPath     string `db:"suf_path"`    // 前端请求路径尾缀
	}
)

func newSkillModel(conn sqlx.SqlConn) *defaultSkillModel {
	return &defaultSkillModel{
		conn:  conn,
		table: "`skill`",
	}
}

func (m *defaultSkillModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSkillModel) FindOne(ctx context.Context, id int64) (*Skill, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", skillRows, m.table)
	var resp Skill
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSkillModel) Insert(ctx context.Context, data *Skill) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, skillRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.SufPath)
	return ret, err
}

func (m *defaultSkillModel) Update(ctx context.Context, data *Skill) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, skillRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.SufPath, data.Id)
	return err
}

func (m *defaultSkillModel) tableName() string {
	return m.table
}
