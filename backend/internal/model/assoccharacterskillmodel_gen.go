// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assocCharacterSkillFieldNames          = builder.RawFieldNames(&AssocCharacterSkill{})
	assocCharacterSkillRows                = strings.Join(assocCharacterSkillFieldNames, ",")
	assocCharacterSkillRowsExpectAutoSet   = strings.Join(stringx.Remove(assocCharacterSkillFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	assocCharacterSkillRowsWithPlaceHolder = strings.Join(stringx.Remove(assocCharacterSkillFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	assocCharacterSkillModel interface {
		Insert(ctx context.Context, data *AssocCharacterSkill) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AssocCharacterSkill, error)
		FindOneByCharacterIdSkillId(ctx context.Context, characterId int64, skillId int64) (*AssocCharacterSkill, error)
		Update(ctx context.Context, data *AssocCharacterSkill) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAssocCharacterSkillModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AssocCharacterSkill struct {
		Id          int64 `db:"id"`
		CharacterId int64 `db:"character_id"` // 角色id
		SkillId     int64 `db:"skill_id"`     // 技能id
	}
)

func newAssocCharacterSkillModel(conn sqlx.SqlConn) *defaultAssocCharacterSkillModel {
	return &defaultAssocCharacterSkillModel{
		conn:  conn,
		table: "`assoc_character_skill`",
	}
}

func (m *defaultAssocCharacterSkillModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAssocCharacterSkillModel) FindOne(ctx context.Context, id int64) (*AssocCharacterSkill, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", assocCharacterSkillRows, m.table)
	var resp AssocCharacterSkill
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssocCharacterSkillModel) FindOneByCharacterIdSkillId(ctx context.Context, characterId int64, skillId int64) (*AssocCharacterSkill, error) {
	var resp AssocCharacterSkill
	query := fmt.Sprintf("select %s from %s where `character_id` = ? and `skill_id` = ? limit 1", assocCharacterSkillRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, characterId, skillId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssocCharacterSkillModel) Insert(ctx context.Context, data *AssocCharacterSkill) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, assocCharacterSkillRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CharacterId, data.SkillId)
	return ret, err
}

func (m *defaultAssocCharacterSkillModel) Update(ctx context.Context, newData *AssocCharacterSkill) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, assocCharacterSkillRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CharacterId, newData.SkillId, newData.Id)
	return err
}

func (m *defaultAssocCharacterSkillModel) tableName() string {
	return m.table
}
